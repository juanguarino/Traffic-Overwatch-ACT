, update_view = F
) %>%
add_polygon()
mapdeck(
style = mapdeck_style("dark"),
pitch = 30,
zoom = 9,
token=token,
location = c(149.12, -35.28)) %>%
add_hexagon(
data = act_crash
, lat = "LATITUDE"
, lon = "LONGITUDE"
, layer_id = "hex_layer"
, elevation_scale = 15
, radius = 1000
, colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("ylorrd"))
, legend = TRUE
, auto_highlight = TRUE
, update_view = F
)
mapdeck() %>%
add_polygon(
data = sf
, fill_colour = "SA2_NAME"
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
)
sf <- spatialwidget::widget_melbourne
sf$opacity <- 150
mapdeck() %>%
add_polygon(
data = sf
, fill_colour = "SA2_NAME"
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = sf
, fill_colour = "SA2_NAME"
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = sf
, fill_colour = "SA2_NAME"
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
, fill_colour = 'AREASQKM'
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = sf
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
, fill_colour = 'AREASQKM'
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = sf
, fill_opacity = 150
, stroke_colour = "SA2_NAME"
, fill_colour = 'AREASQKM'
, legend = TRUE
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = act
, fill_opacity = 150
, stroke_colour = "DIVISION_N"
, fill_colour = 'DIVISION_N'
, legend = TRUE
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = act
, fill_opacity = 150
, stroke_colour = "DIVISION_N"
, fill_colour = 'DIVISION_N'
, legend = TRUE
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = act@polygons
, fill_opacity = 150
, stroke_colour = "DIVISION_N"
, fill_colour = 'DIVISION_N'
, legend = TRUE
)
mapdeck( token = token, style = mapdeck_style("dark"), pitch = 45) %>%
add_polygon(
data = act
, layer_id = act@polygons
, fill_opacity = 150
, stroke_colour = "DIVISION_N"
, fill_colour = 'DIVISION_N'
, legend = TRUE
)
act2 <- readOGR('ACTGOV_DIVISIONS.geojson')
mapdeck(
style = mapdeck_style("dark"),
pitch = 30,
zoom = 9,
token=token,
location = c(149.12, -35.28)) %>%
add_hexagon(
data = act_crash
, lat = "LATITUDE"
, lon = "LONGITUDE"
, layer_id = "hex_layer"
, elevation_scale = 15
, radius = 1000
, colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("ylorrd"))
, legend = TRUE
, auto_highlight = TRUE
, update_view = F
)
View(act_crash)
mapdeck(
style = mapdeck_style("dark"),
pitch = 30,
zoom = 9,
token=token,
location = c(149.12, -35.28)) %>%
add_hexagon(
data = act_crash[act_crash$CRASH_SEVERITY=='Fatal']
, lat = "LATITUDE"
, lon = "LONGITUDE"
, layer_id = "hex_layer"
, elevation_scale = 15
, radius = 1000
, colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("ylorrd"))
, legend = TRUE
, auto_highlight = TRUE
, update_view = F
)
mapdeck(
style = mapdeck_style("dark"),
pitch = 30,
zoom = 9,
token=token,
location = c(149.12, -35.28)) %>%
add_hexagon(
data = act_crash[act_crash$CRASH_SEVERITY=='Injury']
, lat = "LATITUDE"
, lon = "LONGITUDE"
, layer_id = "hex_layer"
, elevation_scale = 15
, radius = 1000
, colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("ylorrd"))
, legend = TRUE
, auto_highlight = TRUE
, update_view = F
)
mapdeck(
style = mapdeck_style("dark"),
pitch = 30,
zoom = 9,
token=token,
location = c(149.12, -35.28)) %>%
add_hexagon(
data = act_crash[act_crash$CRASH_SEVERITY=='Injury']
, lat = "LATITUDE"
, lon = "LONGITUDE"
, layer_id = "hex_layer"
, elevation_scale = 15
, radius = 1000
, colour_range = colourvalues::colour_values(1:6, palette = colourvalues::get_palette("ylorrd"))
, legend = TRUE
, auto_highlight = TRUE
, update_view = F
)
library(data.table)
dataset <- read.csv('~/Desktop/11524_ARVR/ACT_Road_Crash_Data.csv')
dataset <- as.data.table(dataset)
SL <- dataset$SUBURB_LOCATION
WC <- dataset$WEATHER_CONDITION
RC <- dataset$ROAD_CONDITION
LC <- dataset$LIGHTING_CONDITION
CT <- dataset$CRASH_TIME
library(data.table)
dataset <- read.csv('ACT_Road_Crash_Data.csv')
dataset <- as.data.table(dataset)
SL <- dataset$SUBURB_LOCATION
WC <- dataset$WEATHER_CONDITION
RC <- dataset$ROAD_CONDITION
LC <- dataset$LIGHTING_CONDITION
CT <- dataset$CRASH_TIME
library(shiny)
ui <- fluidPage(
titlePanel("Road Crash Data"),
sidebarLayout(
sidebarPanel(
selectInput("graphtype", label="Choose a graph type",
c(Map = 'Map',TimeSlot = 'TimeSlot',Condition = 'Conditions')),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
)
),
mainPanel(
plotOutput(outputId = "plot"))
)
)
server <- function(input, output) {
output$plot <- renderPlot({
if (input$graphtype=="Map"){
barplot(SL)}
else if (input$graphtype=="Condition"){
barplot(WC,RC,LC)}
else if (input$graphtype=="TimeSlot"){
barplot(CT)}
})
}
shinyApp(ui = ui, server = server)
act_suburn <- act_crash %>% count(SUBURB_LOCATION) %>% arrange(desc(n))
# Top 10 Suburbs
act_suburn <- act_crash %>% count(SUBURB_LOCATION) %>% arrange(desc(n))
head(act_suburn,10) %>% ggplot(aes(x = reorder(SUBURB_LOCATION, n), y =n))+
geom_bar(stat = 'identity',fill='#287D8EFF')+
theme_fivethirtyeight()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
coord_flip()+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Figure 1. Top 10 Suburbs - ACT Crashes'
)
# Extract hour
act_crash$CRASH_TIME <- strptime(act_crash$CRASH_TIME, format = "%H:%M") %>%  hour()
# Convert string to datetime
act_crash$CRASH_DATE <- parse_date_time(act_crash$CRASH_DATE, orders = c('dmy'))
# Extract year
act_crash$Year <- strptime(act_crash$CRASH_DATE, format = "%Y-%m-%d") %>%  year()
act_crash_year <- setNames(data.frame(table(act_crash$Year)),c("Date","Count"))
# Crashes per year
act_crash_year %>% ggplot(aes(x=Date, y=Count))+
geom_line(color='#287D8EFF',group=1)+
geom_point()+
theme_fivethirtyeight()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Years - ACT Crashes'
)
act_crash_month %>% ggplot(aes(x=Date, y=Count))+
geom_line(color='#287D8EFF',group=1)+
geom_point()+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Montly - ACT Crashes'
)
# Crashes day of the week
act_crash$week_day <- strptime(act_crash$CRASH_DATE, format = "%Y-%m-%d") %>%  weekdays()
act_crash_weekday <- setNames(data.frame(table(act_crash$week_day)),c("Date","Count"))
act_crash_weekday %>% ggplot(aes(x=Date, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Montly - ACT Crashes'
)
act_crash_hour %>% ggplot(aes(x=Time, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Montly - ACT Crashes'
)
act_crash_hour %>% ggplot(aes(x=Time, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Hour',
y= 'Number of Crashes',
title = 'Montly - ACT Crashes'
)
act_crash_hour %>% ggplot(aes(x=Time, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Hour',
y= 'Number of Crashes',
title = 'Hourly - ACT Crashes'
)
act_crash_hour %>% ggplot(aes(x=Time, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_minimal()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Hour',
y= 'Number of Crashes',
title = 'Hourly - ACT Crashes'
)
act_crash_hour %>% ggplot(aes(x=Time, y=Count))+
geom_line(color='#287D8EFF',group=1)+
geom_point()+
theme_minimal()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Hour',
y= 'Number of Crashes',
title = 'Hourly - ACT Crashes'
)
# Crashes day of the week
act_crash$week_day <- strptime(act_crash$CRASH_DATE, format = "%Y-%m-%d") %>%  weekdays()
act_crash_weekday <- setNames(data.frame(table(act_crash$week_day)),c("Date","Count"))
act_crash_weekday %>% ggplot(aes(x=Date, y=Count))+
geom_line(color='#287D8EFF',group=1)+
theme_tinyhand()+
theme(plot.title = element_text(size = 12, face = 'bold', hjust = 0.5),
axis.title.x = element_text(size = 10, hjust = 0.5, face = 'bold'),
axis.text.x = element_text(size = 8),
axis.title.y = element_text(size = 10, hjust = 0.5, vjust = 1, face = 'bold'),
axis.text.y = element_text(size = 8),
axis.line.x = element_line(color='black', size=1),
legend.position = 'none'
)+
scale_fill_viridis_d()+
labs(x = 'Suburbs',
y= 'Number of Crashes',
title = 'Montly - ACT Crashes'
)
library(data.table)
dataset <- read.csv('ACT_Road_Crash_Data.csv')
dataset <- as.data.table(dataset)
SL <- dataset$SUBURB_LOCATION
WC <- dataset$WEATHER_CONDITION
RC <- dataset$ROAD_CONDITION
LC <- dataset$LIGHTING_CONDITION
CT <- dataset$CRASH_TIME
library(shiny)
ui <- fluidPage(
titlePanel("Road Crash Data"),
sidebarLayout(
sidebarPanel(
selectInput("graphtype", label="Choose a graph type",
c(Map = 'Map',TimeSlot = 'TimeSlot',Condition = 'Conditions')),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
)
),
mainPanel(
plotOutput(outputId = "plot"))
)
)
server <- function(input, output) {
output$plot <- renderPlot({
if (input$graphtype=="Map"){
barplot(SL)}
else if (input$graphtype=="Condition"){
barplot(WC,RC,LC)}
else if (input$graphtype=="TimeSlot"){
barplot(CT)}
})
}
shinyApp(ui = ui, server = server)
install.packages('htmltools')
library(data.table)
dataset <- read.csv('ACT_Road_Crash_Data.csv')
dataset <- as.data.table(dataset)
SL <- dataset$SUBURB_LOCATION
WC <- dataset$WEATHER_CONDITION
RC <- dataset$ROAD_CONDITION
LC <- dataset$LIGHTING_CONDITION
CT <- dataset$CRASH_TIME
library(shiny)
ui <- fluidPage(
titlePanel("Road Crash Data"),
sidebarLayout(
sidebarPanel(
selectInput("graphtype", label="Choose a graph type",
c(Map = 'Map',TimeSlot = 'TimeSlot',Condition = 'Conditions')),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
),
conditionalPanel(
condition="input.graphtype == 'Conditions'",
selectInput(
"TC", label="Types of Crash Conditions",
c(Weather = 'Weather',Lighting = 'Lighting',Road = 'Road')),
)
),
mainPanel(
plotOutput(outputId = "plot"))
)
)
server <- function(input, output) {
output$plot <- renderPlot({
if (input$graphtype=="Map"){
barplot(SL)}
else if (input$graphtype=="Condition"){
barplot(WC,RC,LC)}
else if (input$graphtype=="TimeSlot"){
barplot(CT)}
})
}
shinyApp(ui = ui, server = server)
runApp('~/Downloads/test.R')
library(shiny); runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
install.packages("dashboardthemes")
runApp('ACT_Road_Crash - App.R')
install.packages('Shinydashboard')
install.packages('shinydashboard')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
runApp('ACT_Road_Crash - App.R')
